<?php
/*
 * @file
 * Main module file for Student.
 */

/*
 * Implements hook_entity_info().
 */
function student_entity_info() {

  $entities = array();

  $entities['student'] = array(
    'label' => t('Student'),
    'access callback' => 'student_access',
    'uri callback' => 'student_uri',
    'controller class' => 'StudentController',
    'base table' => 'student',
    'label callback' => 'student_label',
    'entity keys' => array(
      'id' => 'student_id',
      'bundle' => 'type',
    ),
    'bundle keys' => array(
      'bundle' => 'type',
    ),
    'bundles' => array(),
    'static cache' => TRUE,
    'fieldable' => TRUE,
    'module' => 'student',
    'view modes' => array(
      'full' => array(
        'label' => t('Full content'),
        'custom settings' => TRUE,
      ),
      'teaser' => array(
        'label' => t('Teaser'),
        'custom settings' => TRUE,
      ),
    ),
    'redirect' => FALSE, // Redirect module
  );

  foreach (student_types() as $machine_name => $type) {
    $entities['student']['bundles'][$machine_name] = array(
      'label' => drupal_ucfirst($type['name']),
      'admin' => array(
        'path' => 'admin/config/students/' . $machine_name,
        'real path' => 'admin/config/students/' . $machine_name,
        'bundle argument' => 3,
        'access arguments' => array('administer students'),
      ),
    );
  }

  return $entities;

}

/**
 * Implements hook_menu().
 */
function student_menu() {

  $items = array();

  $items['admin/config/students'] = array(
    'title' => 'Students',
    'description' => 'Administer students.',
    'page callback' => 'system_admin_menu_block_page',
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
    'access arguments' => array('administer students'),
  );

  $items['admin/config/students/list'] = array(
    'title' => 'Student list',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('student_list_form'),
    'access arguments' => array('administer students'),
    'file' => 'student.admin.inc',
    'description' => 'View, edit, and add new students.',
    'weight' => -10,
  );

  foreach (student_types() as $machine_name => $type) {
    $items['admin/config/students/list/add/' . $machine_name] = array(
      'title' => 'Add new ' . $type['name'],
      'title callback' => 'check_plain',
      'page callback' => 'student_page_add',
      'page arguments' => array(4),
      'access arguments' => array('administer students'),
      'file' => 'student.admin.inc',
      'description' => empty($type['description'])? '' : $type['description'],
      'type' => MENU_LOCAL_ACTION,
    );
    $items['admin/config/students/' . $machine_name] = array(
      'title' => drupal_ucfirst($type['name']) . ' settings',
      'title callback' => 'check_plain',
      'page callback' => 'system_admin_menu_block_page',
      'access arguments' => array('administer students'),
      'file' => 'system.admin.inc',
      'file path' => drupal_get_path('module', 'system'),
      'description' => empty($type['description'])? '' : $type['description'],
    );
  }

  return $items;

}

/**
 * Return information about student types in a structured array, keyed by
 * each type's machine name. Each element is also a structured array defining at
 * least 'name'.
 *
 * This uses hook_student_type_info() to allow other modules to define types.
 *
 * @return array
 */
function student_types() {
  $types = &drupal_static(__FUNCTION__);
  if (empty($types)) {
    $types = array();
    $types += module_invoke_all('student_type_info');
  }
  return $types;
}

/**
 * Implements hook_permission().
 *
 * @return array
 */
function student_permission() {
  $permissions = array(
    'administer students' => array(
      'title' => t('Administer students'),
      'description' => t('Alter the fields and display settings for student types.'),
    ),
    'create student' => array(
      'title' => t('Create any students'),
    ),
    'delete student' => array(
      'title' => t('Delete any students'),
      'description' => t('This permission is dangerous: deleting an student automatically deletes ALL associated data.'),
      'restrict access' => TRUE,
    ),
    'edit student' => array(
      'title' => t('Edit any student'),
    ),
    'view student' => array(
      'title' => t('View any student'),
    ),
  );
  return $permissions;
}

/**
 * Implements entity_uri(). URI callback for a single student. See:
 * http://api.drupal.org/api/drupal/includes--common.inc/function/entity_uri/7.
 *
 * @param stdClass $entity
 *
 * @return array
 */
function student_uri(stdClass $student) {
  $path = 'student/' . $student->student_id;
  return array(
    'path' => $path,
  );
}

/**
 * Determines whether the given user has access to a Student.
 *
 * @param $op
 *   The operation being performed. One of 'view', 'update', 'create', 'delete'
 *   or just 'edit' (being the same as 'create' or 'update').
 * @param $student
 *   Optionally a student o check access for. If nothing is given, access for
 *   all students is determined.
 * @param $account
 *   The user to check for. Leave it to NULL to check for the global user.
 * @return boolean
 *   Whether access is allowed or not.
 */
function student_access($op, $student = NULL, $account = NULL) {
  switch ($op) {
    case 'view':
      return (bool) user_access('view student', $account);
      break;
    case 'create':
      return (bool) user_access('create student', $account);
      break;
    case 'update':
    case 'edit':
      return (bool) user_access('edit student', $account);
      break;
    case 'delete':
      return (bool) user_access('delete student', $account);
      break;
  }
  return FALSE;
}

/**
 * Wrapper function to allow deleting multiple students.
 *
 * @param array $student_ids
 *   Array of student IDs.
 * @return bool
 */
function student_delete_multiple(array $student_ids) {
  return entity_get_controller('student')->delete($student_ids);
}

/**
 * Wrapper function to allow deleting an individual student.
 *
 * @see student_delete_multiple()
 *
 * @param mixed $student_id
 *   Single student ID.
 * @return bool
 */
function student_delete($student_id) {
  return student_delete_multiple(array($student_id));
}

/**
 * Wrapper function to allow saving a student.
 *
 * @param stdClass $student
 *   student object.
 * @return bool
 */
function student_save(stdClass $student) {
  return entity_get_controller('student')->save($student);
}

/*
 * Student entity label callback.
 *
 * Note that for Drupal 8 the parameter order for label callbacks will be
 * reversed.
 *
 * @param stdClass $entity
 */
function student_label(stdClass $entity, $entity_type) {

  if ($entity_type != 'student') {
    return FALSE;
  }

  if (!empty($entity->uid) && $account = user_load($entity->uid)) {
    return t('Student @username (#@id)', array('@username' => $account->name, '@id' => $entity->student_id));
  }

  return t('Student #@id', array('@id' => $entity->student_id));

}
