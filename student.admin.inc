<?php
/**
 * @file
 * Administration page callbacks for the Student module.
 */

/**
 * Page callback for editing a student, path: student/%student/edit.
 *
 * @param stdClass $student
 *
 * @return array
 *   Render array generated by Form API for the form: student_form.
 */
function student_page_edit($student) {

  $type = student_type_get_info($student->type);
  $title = t(
    'Edit @type: %label',
    array(
      '@type' => $type['name'],
      '%label' => entity_label('student', $student),
    )
  );

  drupal_set_title($title, PASS_THROUGH);

  return drupal_get_form('student_form', $student);

}

/**
 * Form builder function for the main administrative list of students.
 * See http://api.drupal.org/api/drupal/includes--form.inc/group/form_api/7.
 *
 * @param array $form
 * @param array $form_state
 *
 * @return array
 *   Render array.
 */
function student_list_form($form, $form_state) {

  // Build the sortable table header.
  $header = array(
    'label' => array('data' => t('Label')),
    'type' => array('data' => t('Type'), 'field' => 's.type'),
    'uid' => array('data' => t('User ID'), 'field' => 's.uid'),
    'uuid' => array('data' => t('UUID'), 'field' => 's.uuid'),
    'changed' => array('data' => t('Last updated'), 'field' => 's.changed', 'sort' => 'desc'),
    'operations' => array('data' => t('Operations')),
  );

  // Build the student query, adding a pager and sorter.
  $query = db_select('student', 's')
    ->extend('PagerDefault')
    ->extend('TableSort')
    ->fields('s', array('student_id'))
    ->limit(50)
    ->orderByHeader($header);

  // Get an array of student IDs
  $student_ids = $query->execute()->fetchCol();

  $students = student_load_multiple($student_ids);

  $destination = drupal_get_destination();

  $options = array();
  foreach ($students as $id => $student) {

    // Load type information from machine name.
    $type = student_type_get_info($student->type);

    $options[$student->student_id] = array(
      'label' => check_plain(entity_label('student', $student)),
      'type' => drupal_ucfirst($type['name']),
      'uid' => (int) $student->uid,
      'uuid' => check_plain($student->uuid),
      'changed' => format_date($student->changed, 'short'),
      'operations' => array(),
    );

    $student_uri = entity_uri('student', $student);
    $student_uri_path = $student_uri['path'];

    $operations = array();

    if (entity_access('update', 'student', $student)) {
      $operations['edit'] = l(
        t('edit'),
        $student_uri_path . '/edit',
        array('query' => $destination)
      );
    }

    if (entity_access('delete', 'student', $student)) {
      $operations['delete'] = l(
        t('delete'),
        $student_uri_path . '/delete',
        array('query' => $destination)
      );
    }

    if (count($operations)) {
      // Render an unordered list of operations links.
      $options[$student->student_id]['operations'] = array(
        'data' => array(
          '#theme' => 'item_list',
          '#items' => $operations,
          '#attributes' => array('class' => array('operations')),
        ),
      );
    }

  }

  if (FALSE) { // don't bother with tableselect yet
    $form['students'] = array(
      '#type' => 'tableselect',
      '#header' => $header,
      '#options' => $options,
      '#empty' => t('No students available.'),
    );
  }
  else {
    $form['students'] = array(
      '#theme' => 'table',
      '#header' => $header,
      '#rows' => $options,
      '#empty' => t('No students available.'),
    );
  }

  $form['pager'] = array('#markup' => theme('pager'));

  return $form;
}

/**
 * Page callback for adding a student, path: admin/config/students/list/add/%.
 *
 * @param string $machine_name
 *   The machine name of the student type (bundle key).
 *
 * @return array
 *   Render array generated by Form API for the form: student_form.
 */
function student_page_add($machine_name) {

  if (!$type = student_type_get_info($machine_name)) {
    return MENU_NOT_FOUND;
  }

  $student = entity_get_controller('student')->create(array('type' => $machine_name));

  drupal_set_title(
    t('Add new @type', array('@type' => $type['name'])),
    PASS_THROUGH
  );

  return drupal_get_form('student_form', $student);

}

/**
 * Form builder function for adding or editing a student.
 * See http://api.drupal.org/api/drupal/includes--form.inc/group/form_api/7.
 *
 * @param array $form
 * @param array $form_state
 * @param stdClass $student
 *
 * @return array
 *   Render array.
 */
function student_form($form, &$form_state, $student) {

  $form['#id'] = 'student-form';
  $form['#student'] = $student;

  $form_state['student'] = $student;

  $form['uuid'] = array(
    '#type' => 'textfield',
    '#title' => t('UUID'),
    '#default_value' => isset($student->uuid)? $student->uuid : '',
    '#required' => FALSE,
    '#size' => 30,
  );

  $form['buttons'] = array(
    '#type' => 'actions',
    '#weight' => 100,
  );
  $form['buttons']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
    '#submit' => array('student_form_submit'),
  );

  if (!empty($student->student_id)) {
    $form['buttons']['delete'] = array(
      '#type' => 'submit',
      '#value' => t('Delete'),
      '#submit' => array('student_form_delete_submit'),
      '#access' => entity_access('delete', 'student', $student),
    );
  }

  $form['#validate'][] = 'student_form_validate';

  // Add custom fields from the Field system.
  field_attach_form('student', $student, $form, $form_state);

  return $form;

}

/**
 * Form validate function for the form student_form.
 *
 * @param array $form
 * @param array &$form_state
 * @return void
 */
function student_form_validate($form, &$form_state) {

  // Check other Fields.
  field_attach_form_validate('student', $form_state['student'], $form, $form_state);

}

/**
 * Form submit function for the Save button in the form student_form.
 *
 * @param array $form
 * @param array &$form_state
 * @return void
 */
function student_form_submit($form, &$form_state) {
  global $user;
  $student = &$form_state['student'];

  if (isset($form_state['values']['uid'])) {
    $student->uid = $form_state['values']['uid'];
  }

  if (isset($form_state['values']['uuid'])) {
    $student->uuid = $form_state['values']['uuid'];
  }

  field_attach_submit('student', $student, $form, $form_state);

  // Save the student.
  student_save($student);

  // Notify the user that the student was saved.
  $type = student_type_get_info($student->type);
  drupal_set_message(
    t('The @type "@label" was saved.', array('@type' => $type['name'], '@label' => entity_label('student', $student)))
  );

}

/**
 * Form submit function for the Delete button in the form student_form.
 *
 * @param array $form
 * @param array &$form_state
 * @return void
 */
function student_form_delete_submit($form, &$form_state) {
  $destination = array();
  if (isset($_GET['destination'])) {
    $destination = drupal_get_destination();
    unset($_GET['destination']);
  }
  $student = $form['#student'];
  $student_uri = student_uri($student);
  $student_uri_path = $student_uri['path'];
  $form_state['redirect'] = array(
    $student_uri_path . '/delete',
    array('query' => $destination),
  );
}

/**
 * Form builder function to confirm the delete action for a student.
 * See http://api.drupal.org/api/drupal/modules--system--system.module/function/confirm_form.
 *
 * @param array $form
 * @param array &$form_state
 * @param stdClass $student
 *
 * @return array
 *   Render array.
 */
function student_form_delete_confirm($form, &$form_state, $student) {

  $form['#student'] = $student;
  $form['student_id'] = array(
    '#type' => 'value',
    '#value' => $student->student_id,
  );

  $student_uri = student_uri($student);
  $student_uri_path = $student_uri['path'];

  return confirm_form(
    $form,
    t('Are you sure you want to delete %label?', array('%label' => entity_label('student', $student))),
    $student_uri_path,
    t('Deleting a student also deletes ALL associated data. This action cannot be undone.'),
    t('Delete'),
    t('Cancel')
  );

}

/**
 * Form submit function for the Delete button in the form student_form_delete_confirm.
 *
 * @param array $form
 * @param array &$form_state
 * @return void
 */
function student_form_delete_confirm_submit($form, &$form_state) {
  if ($form_state['values']['confirm']) {
    $student = student_load($form_state['values']['student_id']);
    $delete = student_delete($form_state['values']['student_id']);
    if ($delete) {
      watchdog('student', 'Deleted student "%label" (type: @type)', array('@type' => $student->type, '%label' => entity_label('student', $student)));
    }

    $type = student_type_get_info($student->type);

    if ($delete) {
      drupal_set_message(
        t('The @type %label has been deleted.', array('@type' => $type['name'], '%label' => entity_label('student', $student)))
      );
    }
    else {
      drupal_set_message(
        t('Failed to delete the @type %label.', array('@type' => $type['name'], '%label' => entity_label('student', $student))),
        'error'
      );
    }
  }

  if (empty($_GET['destination'])) {
    $form_state['redirect'] = 'admin/config/students';
  }


}
