<?php
/**
 * @file
 * Administration page callbacks for the Member module.
 */

/**
 * Page callback for editing a member, path: member/%member/edit.
 *
 * @param stdClass $member
 *
 * @return array
 *   Render array generated by Form API for the form: member_form.
 */
function member_page_edit($member) {

  $type = member_type_get_info($member->type);
  $title = t(
    'Edit @type: %label',
    array(
      '@type' => $type['name'],
      '%label' => entity_label('member', $member),
    )
  );

  drupal_set_title($title, PASS_THROUGH);

  return drupal_get_form('member_form', $member);

}

/**
 * Form builder function for the main administrative list of members.
 * See http://api.drupal.org/api/drupal/includes--form.inc/group/form_api/7.
 *
 * @param array $form
 * @param array $form_state
 *
 * @return array
 *   Render array.
 */
function member_list_form($form, $form_state) {

  // Build the sortable table header.
  $header = array(
    'label' => array('data' => t('Label')),
    'status' => array('data' => t('Status'), 'field' => 's.status'),
    'type' => array('data' => t('Type'), 'field' => 's.type'),
    'uid' => array('data' => t('User ID'), 'field' => 's.uid'),
    'uuid' => array('data' => t('UUID'), 'field' => 's.uuid'),
    'changed' => array('data' => t('Last updated'), 'field' => 's.changed', 'sort' => 'desc'),
    'operations' => array('data' => t('Operations')),
  );

  $totalResult = db_query('SELECT COUNT(DISTINCT member_id) AS total FROM {member}');
  foreach ($totalResult as $row) {
    $total = $row->total;
    break;
  }
  $form['total'] = array(
    '#type' => 'item',
    '#markup' => t('Total count: @total', array('@total' => number_format($total))),
  );

  // Build the member query, adding a pager and sorter.
  $query = db_select('member', 's')
    ->extend('PagerDefault')
    ->extend('TableSort')
    ->fields('s', array('member_id'))
    ->limit(10)
    ->orderByHeader($header);

  // Get an array of member IDs
  $member_ids = $query->execute()->fetchCol();

  $members = member_load_multiple($member_ids);

  $destination = drupal_get_destination();

  $options = array();
  foreach ($members as $id => $member) {

    // Load type information from machine name.
    $type = member_type_get_info($member->type);

    $options[$member->member_id] = array(
      'label' => member_label($member, 'member'), // label is sanitized in member_label()
      'status' => _member_format_status($member),
      'type' => drupal_ucfirst($type['name']),
      'uid' => check_plain($member->uid),
      'uuid' => check_plain($member->uuid),
      'changed' => format_date($member->changed, 'short'),
      'operations' => array(),
    );

    $member_uri = entity_uri('member', $member);
    $member_uri_path = $member_uri['path'];

    $operations = array();

    if (entity_access('view', 'member', $member)) {
      $operations['view'] = l(
        t('view'),
        $member_uri_path
      );
    }

    if (entity_access('update', 'member', $member)) {
      $operations['edit'] = l(
        t('edit'),
        $member_uri_path . '/edit',
        array('query' => $destination)
      );
    }

    if (entity_access('delete', 'member', $member)) {
      $operations['delete'] = l(
        t('delete'),
        $member_uri_path . '/delete',
        array('query' => $destination)
      );
    }

    if (count($operations)) {
      // Render an unordered list of operations links.
      $options[$member->member_id]['operations'] = array(
        'data' => array(
          '#theme' => 'item_list',
          '#items' => $operations,
          '#attributes' => array('class' => array('operations')),
        ),
      );
    }

  }

  $form['members'] = array(
    '#theme' => 'table',
    '#header' => $header,
    '#rows' => $options,
    '#empty' => t('No members available.'),
  );

  $form['pager'] = array('#markup' => theme('pager'));

  return $form;
}

/**
 * Page callback for adding a member, path: admin/members/list/add/%.
 *
 * @param string $machine_name
 *   The machine name of the member type (bundle key).
 *
 * @return array
 *   Render array generated by Form API for the form: member_form.
 */
function member_page_add($machine_name) {

  if (!$type = member_type_get_info($machine_name)) {
    return MENU_NOT_FOUND;
  }

  $member = entity_get_controller('member')->create(array('type' => $machine_name));

  drupal_set_title(
    t('Add new @type', array('@type' => $type['name'])),
    PASS_THROUGH
  );

  return drupal_get_form('member_form', $member);

}

/**
 * Form builder function for adding or editing a member.
 * See http://api.drupal.org/api/drupal/includes--form.inc/group/form_api/7.
 *
 * @param array $form
 * @param array $form_state
 * @param stdClass $member
 *
 * @return array
 *   Render array.
 */
function member_form($form, &$form_state, $member) {

  $form['#id'] = 'member-form';
  $form['#member'] = $member;

  $form_state['member'] = $member;

  $form['name'] = array(
    '#type' => 'textfield',
    '#title' => t('Full name'),
    '#maxlength' => 255,
    '#default_value' => isset($member->name)? $member->name : '',
    '#required' => FALSE,
  );

  $form['status'] = array(
    '#type' => 'select',
    '#title' => t('Membership status'),
    '#options' => member_get_status_options(),
    '#default_value' => isset($member->status)? $member->status : 1,
    '#required' => TRUE,
  );

  $form['uuid'] = array(
    '#type' => 'textfield',
    '#title' => t('Universally unique identifier (UUID)'),
    '#maxlength' => 255,
    '#default_value' => isset($member->uuid)? $member->uuid : '',
    '#required' => TRUE,
  );

  if (!empty($member->uid)) {
    $member_account = user_load($member->uid);
  }

  $form['username'] = array(
    '#type' => 'textfield',
    '#title' => t('Associated user account'),
    '#maxlength' => 60,
    '#autocomplete_path' => 'user/autocomplete',
    '#default_value' => isset($member_account)? $member_account->name : '',
    '#required' => FALSE,
  );

  $form['buttons'] = array(
    '#type' => 'actions',
    '#weight' => 100,
  );
  $form['buttons']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
    '#submit' => array('member_form_submit'),
  );

  if (!empty($member->member_id)) {
    $form['buttons']['delete'] = array(
      '#type' => 'submit',
      '#value' => t('Delete'),
      '#submit' => array('member_form_delete_submit'),
      '#access' => entity_access('delete', 'member', $member),
    );
  }

  $form['#validate'][] = 'member_form_validate';

  // Add custom fields from the Field system.
  field_attach_form('member', $member, $form, $form_state);

  return $form;

}

/**
 * Form validate function for the form member_form.
 *
 * @param array $form
 * @param array &$form_state
 * @return void
 */
function member_form_validate($form, &$form_state) {

  // Check other Fields.
  field_attach_form_validate('member', $form_state['member'], $form, $form_state);

}

/**
 * Form submit function for the Save button in the form member_form.
 *
 * @param array $form
 * @param array &$form_state
 * @return void
 */
function member_form_submit($form, &$form_state) {
  $member = &$form_state['member'];

  if (!empty($form_state['values']['username']) && ($account = user_load_by_name($form_state['values']['username']))) {
    $member->uid = $account->uid;
  }

  if (isset($form_state['values']['uuid'])) {
    $member->uuid = $form_state['values']['uuid'];
  }

  if (isset($form_state['values']['name'])) {
    $member->name = $form_state['values']['name'];
  }

  field_attach_submit('member', $member, $form, $form_state);

  // Save the member.
  member_save($member);

  // Notify the user that the member was saved.
  $type = member_type_get_info($member->type);
  drupal_set_message(
    t('The @type "@label" was saved.', array('@type' => $type['name'], '@label' => entity_label('member', $member)))
  );

}

/**
 * Form submit function for the Delete button in the form member_form.
 *
 * @param array $form
 * @param array &$form_state
 * @return void
 */
function member_form_delete_submit($form, &$form_state) {
  $destination = array();
  if (isset($_GET['destination'])) {
    $destination = drupal_get_destination();
    unset($_GET['destination']);
  }
  $member = $form['#member'];
  $member_uri = member_uri($member);
  $member_uri_path = $member_uri['path'];
  $form_state['redirect'] = array(
    $member_uri_path . '/delete',
    array('query' => $destination),
  );
}

/**
 * Form builder function to confirm the delete action for a member.
 * See http://api.drupal.org/api/drupal/modules--system--system.module/function/confirm_form.
 *
 * @param array $form
 * @param array &$form_state
 * @param stdClass $member
 *
 * @return array
 *   Render array.
 */
function member_form_delete_confirm($form, &$form_state, $member) {

  $form['#member'] = $member;
  $form['member_id'] = array(
    '#type' => 'value',
    '#value' => $member->member_id,
  );

  $member_uri = member_uri($member);
  $member_uri_path = $member_uri['path'];

  return confirm_form(
    $form,
    t('Are you sure you want to delete %label?', array('%label' => entity_label('member', $member))),
    $member_uri_path,
    NULL,
    t('Delete'),
    t('Cancel')
  );

}

/**
 * Form submit function for the Delete button in the form member_form_delete_confirm.
 *
 * @param array $form
 * @param array &$form_state
 * @return void
 */
function member_form_delete_confirm_submit($form, &$form_state) {
  if ($form_state['values']['confirm']) {
    $member = member_load($form_state['values']['member_id']);
    member_delete($form_state['values']['member_id']);
    watchdog('member', 'Deleted member "%label" (type: @type)', array('@type' => $member->type, '%label' => entity_label('member', $member)));

    $type = member_type_get_info($member->type);

    drupal_set_message(
      t('The @type %label has been deleted.', array('@type' => $type['name'], '%label' => entity_label('member', $member)))
    );
  }

  if (empty($_GET['destination'])) {
    $form_state['redirect'] = 'admin/members';
  }


}
